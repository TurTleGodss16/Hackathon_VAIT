@page "/resume"
@using Microsoft.AspNetCore.Components.Forms
@using System.Threading.Tasks
@using Hackathon_VAIT_New.Services
@using Hackathon_VAIT_New.Model
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Json
@using System.Text.Json.Nodes
@inject ILogger<Resume> Logger
@inject HttpClient Client

@inject FirebaseStorageServices firebaseStorageService
@inject IJSRuntime jsRuntime

<h3>Upload Your Resume (PDF)</h3>

<!-- Buttons for New Upload and Resume History -->
<div class="mb-3">
    <button class="btn-custom @((isUploadFormVisible ? "btn-selected" : "btn-unselected"))" @onclick="ShowUploadForm">
        New Upload
    </button>
    <button class="btn-custom @((isHistoryVisible ? "btn-selected" : "btn-unselected"))" @onclick="ShowFileHistory">
        Resume History
    </button>
</div>

@if (isUploadFormVisible)
{
    <!-- Upload Form -->
    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        @if (Model.SelectedResume == null && Model.ResumeFile == null)
        {
            <InputFile accept=".pdf" @bind-Value="Model!.ResumeFile"
                       OnChange="args => { Model.ResumeFile = args.File;}"/>
            <br/>
            <br/>
        }

        @if (Model.ResumeFile != null)
        {
            <p><strong>Selected File:</strong> @Model.ResumeFile.Name</p>
        }
        else if (Model.SelectedResume != null)
        {
            <p><strong>Selected File:</strong> @Model.SelectedResume.Name</p>
        }

        <InputText @bind-Value="Model!.JobDescriptionLink" placeholder="Enter job description link"
                   class="form-control"/>
        <br/>
        <InputText @bind-Value="Model.Message" placeholder="Additional message..." class="form-control"/>

        <br/>
        <button type="submit" class="btn btn-primary" disabled="@isUploading">
            Generate feedback
        </button>
    </EditForm>
    <br/>

    if (jobSummary != null)
    {
        <Card>
            <CardHeader>
                <h5>@jobSummary.JobTitle</h5>
            </CardHeader>
            <CardBody>
                <p><strong>Company Name:</strong> @jobSummary.CompanyName</p>
                <p><strong>Location:</strong> @jobSummary.JobLocation</p>
                <p><strong>Main Responsibility:</strong> @jobSummary.MainResponsibility</p>
                <p><strong>Tech Stack:</strong> @string.Join(", ", jobSummary.TechStack)</p>
            </CardBody>
        </Card>
        <br/>
    }

    @if (uploadSuccess && jobSummary == null)
    {
        <p><i class="fa fa-check-circle" style="color: green;"></i> File uploaded successfully!</p>
    }

    @if (uploadError)
    {
        <p class="text-danger">Error uploading file: @errorMessage</p>
    }

    @if (isLoadingMain)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(AIFeedback))
    {
        <div class="alert mb-2" style="background-color: #82a3ff20;">
            <Markdown style="max-height: 580px;overflow-y:auto;">@AIFeedback</Markdown>
        </div>
        <table class="table table-striped table-bordered mb-2">
            <thead>
            <tr>
                <th>Referer</th>
                <th>Discord ID</th>
                <th>Email</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @{
                foreach (var referer in referers ?? Enumerable.Empty<User>())
                {
                    <tr>
                        <td>@referer.Name</td>
                        <td>@referer.DiscordId</td>
                        <td><a href="mailto:@referer.Email" class="link-info" target="_blank">@referer.Email</a></td>
                        <td>
                            <a href="https://discordapp.com/users/@referer.DiscordId"
                               class="link-primary" target="_blank">Send message</a>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
        <table class="table table-bordered table-striped mb-2 mb-4">
            <thead>
            <tr>
                <th>Reviewer</th>
                <th>Discord ID</th>
                <th>Email</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @{
                foreach (var referer in reviewers ?? Enumerable.Empty<User>())
                {
                    <tr>
                        <td>@referer.Name</td>
                        <td>@referer.DiscordId</td>
                        <td><a href="mailto:@referer.Email" class="link-info" target="_blank">@referer.Email</a></td>
                        <td>
                            <a href="https://discordapp.com/users/@referer.DiscordId"
                               class="link-primary" target="_blank">Send message</a>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
        <div style="height: 40px;"></div>
    }
}

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    @if (isHistoryVisible)
    {
        <h4>Recent uploaded</h4>
        @if (resumeList != null && resumeList.Count > 0)
        {
            <table class="table table-striped mt-3">
                <thead>
                <tr>
                    <th>File Name</th>
                    <th>Upload Date</th>
                    <th>Size (KB)</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var file in resumeList)
                {
                    <tr>
                        <td>@file.FileName</td>
                        <td>@file.UploadDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@(file.FileSize / 1024) KB</td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick='() => DownloadResume("test123", file.Id)'>
                                Download
                            </button>
                            <button class="btn btn-sm btn-success" @onclick='() => SelectResume(file)'>Select</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <p>No resume history available.</p>
        }
    }
}


@code {
    private IBrowserFile selectedFile;
    private bool isUploading = false;
    private bool uploadSuccess = false;
    private bool uploadError = false;
    private bool isLoading = false;
    private bool isLoadingMain = false;
    private string errorMessage = string.Empty;
    private object uploadModel = new object();
    private List<PdfFileMetaData> resumeList = new List<PdfFileMetaData>();
    private bool isUploadFormVisible = true;
    private bool isHistoryVisible = false;
    private string JobDescriptionUrl;
    private string AIFeedback;
    [SupplyParameterFromForm] private ResumeAnalyserModel? Model { get; set; }

    private JobSummary? jobSummary { get; set; } = null;

    private List<User>? referers { get; set; } = null;
    private List<User>? reviewers { get; set; } = null;


    protected override void OnInitialized()
    {
        Model ??= new ResumeAnalyserModel();
    }

    private void ShowUploadForm()
    {
        isUploadFormVisible = true;
        isHistoryVisible = false;
    }

    private void ShowFileHistory()
    {
        isUploadFormVisible = false;
        isHistoryVisible = true;
        LoadFileHistory("test123");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        if (Model.ResumeFile == null && Model.SelectedResume == null)
        {
            errorMessage = "Please select a PDF file.";
            uploadError = true;
            return;
        }

        try
        {
            isUploading = true;
            uploadSuccess = false;
            uploadError = false;
            isLoadingMain = true;

            string userId = "test123";
            if (Model.ResumeFile != null)
                await firebaseStorageService.UploadPdfAsBinaryAsync(Model.ResumeFile, userId);

            uploadSuccess = true;

            var resumeDataUrl = new object();

            if (Model.ResumeFile != null)
            {
                resumeDataUrl = await GetDataURL(Model.ResumeFile);
            }
            else if (Model.SelectedResume != null)
            {
                resumeDataUrl = await GetDataURL(Model.SelectedResume.FileBytes);
            }

            var requestData = new
            {
                model = "gpt-4o-mini",
                input = new JsonArray
                {
                    new { role = "system", content = "Scrape job description and give feedback based on user resume file. Maximum length of response is 300 words." },

                    new
                    {
                        role = "user", content =
                            new JsonArray
                            {
                                new { type = "input_text", text = "JD Link: " + Model?.JobDescriptionLink },
                                new { type = "input_file", filename = Model.ResumeFile != null ? Model!.ResumeFile.Name : Model.SelectedResume.Name, file_data = resumeDataUrl },
                            },
                    },
                },
                text = new
                {
                    format = new
                    {
                        type = "text"
                    }
                },
                tools = new JsonArray
                {
                    new
                    {
                        type = "web_search_preview",
                        user_location = new
                        {
                            type = "approximate",
                            country = "AU"
                        },
                        search_context_size = "medium"
                    }
                },
                max_output_tokens = 512
            };
            var jsonContent = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");

            // Get company name and job description role and job summary
            var requestData2 = new
            {
                model = "gpt-4o-mini",
                input = new JsonArray
                {
                    new { role = "system", content = "Scrape job description and provide job summary in the structured format." },
                    new
                    {
                        role = "user", content =
                            new JsonArray
                            {
                                new { type = "input_text", text = "JD Link: " + Model?.JobDescriptionLink },
                            },
                    },
                },
                text = new
                {
                    format = new
                    {
                        strict = true,

                        type = "json_schema",
                        name = "job_description",
                        schema = new
                        {
                            type = "object",
                            properties = new
                            {
                                company_name = new { type = "string" },
                                job_title = new { type = "string" },
                                main_responsibility = new
                                {
                                    type = "string",
                                    description = "Main responsibility of the job. Just highlights the main points. Less than 50 words."
                                },
                                job_location = new
                                {
                                    type = "string"
                                },
                                tech_stack = new
                                {
                                    type = "array",
                                    items = new
                                    {
                                        type = "string"
                                    }
                                },
                            },
                            required = new JsonArray
                            {
                                "company_name",
                                "job_title",
                                "main_responsibility",
                                "job_location",
                                "tech_stack"
                            },
                            additionalProperties = false
                        },
                    },
                },
                tools = new JsonArray
                {
                    new
                    {
                        type = "web_search_preview",
                        user_location = new
                        {
                            type = "approximate",
                            country = "AU"
                        },
                        search_context_size = "medium"
                    }
                },
                max_output_tokens = 512
            };
            var jsonContent2 = new StringContent(JsonSerializer.Serialize(requestData2), Encoding.UTF8, "application/json");
            var task1 = Client.PostAsync("https://api.openai.com/v1/responses", jsonContent);
            var task2 = Client.PostAsync("https://api.openai.com/v1/responses", jsonContent2);
            await Task.WhenAll(task1, task2);
            var response = await task1;
            var responseContent = await response.Content.ReadAsStringAsync();
            var responseObject = JsonSerializer.Deserialize<OpenAIResponse>(responseContent);
            var response2 = await task2;
            if (responseObject != null)
            {
                AIFeedback = responseObject?.output[0].content[0].text ?? string.Empty;
            }

            var responseContent2 = await response2.Content.ReadAsStringAsync();
            var responseObject2 = JsonSerializer.Deserialize<OpenAIResponse>(responseContent2);

            foreach (var output in responseObject2.output)
            {
                if (output.type == "message")
                {
                    jobSummary = JobSummary.FromJson(
                        output.content[0].text);

                    referers = await firebaseStorageService.GetUsersFromCompany(jobSummary.CompanyName);
                    reviewers = await firebaseStorageService.GetReviewers();
                }
            }

            isLoadingMain = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            uploadError = true;
            errorMessage = ex.Message;
        }
        finally
        {
            isUploading = false;
        }
    }

    private async Task LoadFileHistory(string userId)
    {
        try
        {
            isLoading = true;
            if (String.IsNullOrEmpty(userId))
            {
                errorMessage = "User ID cannot be null or empty.";
                uploadError = true;
                return;
            }

            resumeList = await firebaseStorageService.GetResumeHistory(userId);
            if (resumeList != null && resumeList.Any())
                isLoading = false;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            uploadError = true;
            isLoading = false;
            errorMessage = "Error loading file history: " + ex.Message;
        }
    }

    private async Task DownloadResume(string userId, string fileId)
    {
        try
        {
            if (String.IsNullOrEmpty(userId) || String.IsNullOrEmpty(fileId))
            {
                errorMessage = "User ID and File ID cannot be null or empty.";
                uploadError = true;
                return;
            }

            byte[] fileBytes = await firebaseStorageService.DownloadResumePdfFile(userId, fileId);

            if (fileBytes != null)
            {
                string fileName = "DownloadedResume.pdf";
                string contentType = "application/pdf";
                var dashboardModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "../../Pages/Resume.razor.js");
                await jsRuntime.InvokeVoidAsync("downloadFile", fileName, contentType, fileBytes);
            }
        }
        catch (Exception ex)
        {
            uploadError = true;
            errorMessage = "Error downloading file: " + ex.Message;
        }
    }

    private async Task<string> GetDataURL(object file)
    {
        try
        {
            if (file is IBrowserFile pdfFile)
            {
                using var stream = pdfFile.OpenReadStream();
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                byte[] bytes = memoryStream.ToArray();

                return "data:" + pdfFile.ContentType + ";base64," + Convert.ToBase64String(bytes);
            }
            else if (file is byte[] fileBytes)
            {
                return "data:application/pdf;base64," + Convert.ToBase64String(fileBytes);
            }

            return null;
        }
        catch (Exception ex)
        {
            throw new Exception("Error converting file to Data URL: " + ex.Message);
        }
    }

    private async Task SelectResume(PdfFileMetaData file)
    {
        try
        {
            string userId = "test123";
            byte[] fileBytes = await firebaseStorageService.DownloadResumePdfFile(userId, file.Id);

            if (fileBytes != null)
            {
                Model!.SelectedResume = new SelectedFile
                {
                    Name = file.FileName,
                    FileBytes = fileBytes
                };

                // Notify UI
                isUploadFormVisible = true;
                isHistoryVisible = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            throw new Exception("Error selecting resume: " + ex.Message);
        }
    }

    public class ResumeAnalyserModel
    {
        [DataType(DataType.Upload)] public IBrowserFile? ResumeFile { get; set; }

        [Required] [DataType(DataType.Text)] public string JobDescriptionLink { get; set; } = string.Empty;

        [DataType(DataType.Text)] public string? Message { get; set; } = string.Empty;
        public SelectedFile? SelectedResume { get; set; }
    }

    public class OpenAIResponse
    {
        public Output[] output { get; set; }

        public class Output
        {
            public Content[] content { get; set; }
            public string type { get; set; }
        }

        public class Content
        {
            public string text { get; set; }
        }
    }

    public class SelectedFile
    {
        public string Name { get; set; } = string.Empty;
        public string ContentType { get; set; } = "application/pdf";
        public byte[] FileBytes { get; set; } = Array.Empty<byte>();
    }

}
