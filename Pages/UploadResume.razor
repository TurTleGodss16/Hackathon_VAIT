@page "/resume-chat"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Json
@using System.Text.Json.Nodes
@using Hackathon_VAIT_New.Model
@using Hackathon_VAIT_New.Services
@inject FirebaseStorageServices firebaseStorageService
@inject ILogger<UploadResume> Logger
@inject HttpClient Client

<EditForm Model="Model" OnValidSubmit="Submit" FormName="UploadResume">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="d-flex flex-row gap-2 ">
        <div class="d-flex flex-column gap-2 flex-grow-1">
            <p class="h2">Choose Resume</p>
            <InputFile accept=".pdf" @bind-Value="Model!.ResumeFile"
                       OnChange="args => { 
            Model.ResumeFile = args.File;}"
            />
        </div>

        <div class="d-flex flex-column gap-2" style="min-width: 800px; max-width: 800px;">
            <div class="d-flex flex-row gap-2 align-items-center">
                <p class="p-0 m-0">Job Description</p>
                @{
                    if (jobSummary != null)
                    {
                        <a href="@Model!.JobDescriptionLink" target="_blank" class="link-info">Link</a>
                    }
                }
            </div>
            @{
                if (jobSummary != null)
                {
                    <Card>
                        <CardHeader>
                            <h5>@jobSummary.JobTitle</h5>
                        </CardHeader>
                        <CardBody>
                            <p><strong>Company Name:</strong> @jobSummary.CompanyName</p>
                            <p><strong>Location:</strong> @jobSummary.JobLocation</p>
                            <p><strong>Main Responsibility:</strong> @jobSummary.MainResponsibility</p>
                            <p><strong>Tech Stack:</strong> @string.Join(", ", jobSummary.TechStack)</p>
                        </CardBody>
                    </Card>
                }
                else
                {
                    <InputText @bind-Value="Model!.JobDescriptionLink" placeholder="Enter job description link"
                               class="form-control"/>
                }
            }
            @{
                if (!string.IsNullOrEmpty(RenderedText))
                {
                    <div class="alert mb-2" style="background-color: #82a3ff20;">
                        <Markdown style="max-height: 580px;overflow-y:auto;">@RenderedText</Markdown>
                    </div>
                    <table class="table table-striped table-bordered mb-2">
                        <thead>
                        <tr>
                            <th>Referer</th>
                            <th>Discord ID</th>
                            <th>Email</th>
                        </tr>
                        </thead>
                        <tbody>
                        @{
                            foreach (var referer in referers ?? Enumerable.Empty<User>())
                            {
                                <tr>
                                    <td>@referer.Name</td>
                                    <td>@referer.DiscordId</td>
                                    <td>@referer.Email</td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                    <table class="table table-bordered table-striped mb-2">
                        <thead>
                        <tr>
                            <th>Reviewer</th>
                            <th>Discord ID</th>
                            <th>Email</th>
                        </tr>
                        </thead>
                        <tbody>
                        @{
                            foreach (var referer in reviewers ?? Enumerable.Empty<User>())
                            {
                                <tr>
                                    <td>@referer.Name</td>
                                    <td>@referer.DiscordId</td>
                                    <td>@referer.Email</td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                }
                else
                {
                    <InputText @bind-Value="Model.Message" placeholder="Additional message..." class="form-control"/>
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Loading="@IsLoading">Send</Button>
                }
            }

        </div>

    </div>
</EditForm>

@code
{
    [SupplyParameterFromForm] private ResumeAnalyserModel? Model { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new ResumeAnalyserModel();
    }


    public class ResumeAnalyserModel
    {
        [Required] [DataType(DataType.Upload)] public IBrowserFile? ResumeFile { get; set; }

        [Required] [DataType(DataType.Text)] public string JobDescriptionLink { get; set; } = string.Empty;

        [DataType(DataType.Text)] public string? Message { get; set; } = string.Empty;
    }

    public class OpenAIResponse
    {
        public Output[] output { get; set; }

        public class Output
        {
            public Content[] content { get; set; }
            public string type { get; set; }
        }

        public class Content
        {
            public string text { get; set; }
        }
    }

    private string RenderedText { get; set; } = string.Empty;

    private bool IsLoading { get; set; } = false;

    private JobSummary? jobSummary { get; set; } = null;

    private List<User>? referers { get; set; } = null;
    private List<User>? reviewers { get; set; } = null;

    private async Task Submit()
    {
        try
        {
            IsLoading = true;
            var resumeDataUrl = await GetDataURL(Model!.ResumeFile);
            var requestData = new
            {
                model = "gpt-4o-mini",
                input = new JsonArray
                {
                    new { role = "system", content = "Scrape job description and give feedback based on user resume file. Limit your response to fewer than 300 words." },
                    new
                    {
                        role = "user", content =
                            new JsonArray
                            {
                                new { type = "input_text", text = "JD Link: " + Model?.JobDescriptionLink },
                                new { type = "input_file", filename = Model!.ResumeFile.Name, file_data = resumeDataUrl },
                            },
                    },
                },
                text = new
                {
                    format = new
                    {
                        type = "text"
                    }
                },
                tools = new JsonArray
                {
                    new
                    {
                        type = "web_search_preview",
                        user_location = new
                        {
                            type = "approximate",
                            country = "AU"
                        },
                        search_context_size = "medium"
                    }
                },
                max_output_tokens = 512
            };
            // Get company name and job description role and job summary
            var requestData2 = new
            {
                model = "gpt-4o-mini",
                input = new JsonArray
                {
                    new { role = "system", content = "Scrape job description and provide job summary in the structured format." },
                    new
                    {
                        role = "user", content =
                            new JsonArray
                            {
                                new { type = "input_text", text = "JD Link: " + Model?.JobDescriptionLink },
                            },
                    },
                },
                text = new
                {
                    format = new
                    {
                        strict = true,

                        type = "json_schema",
                        name = "job_description",
                        schema = new
                        {
                            type = "object",
                            properties = new
                            {
                                company_name = new { type = "string" },
                                job_title = new { type = "string" },
                                main_responsibility = new
                                {
                                    type = "string",
                                    description = "Main responsibility of the job. Just highlights the main points. Less than 50 words."
                                },
                                job_location = new
                                {
                                    type = "string"
                                },
                                tech_stack = new
                                {
                                    type = "array",
                                    items = new
                                    {
                                        type = "string"
                                    }
                                },
                            },
                            required = new JsonArray
                            {
                                "company_name",
                                "job_title",
                                "main_responsibility",
                                "job_location",
                                "tech_stack"
                            },
                            additionalProperties = false
                        },
                    },
                },
                tools = new JsonArray
                {
                    new
                    {
                        type = "web_search_preview",
                        user_location = new
                        {
                            type = "approximate",
                            country = "AU"
                        },
                        search_context_size = "medium"
                    }
                },
                max_output_tokens = 512
            };
            var jsonContent = new StringContent(JsonSerializer.Serialize(requestData), Encoding.UTF8, "application/json");
            var jsonContent2 = new StringContent(JsonSerializer.Serialize(requestData2), Encoding.UTF8, "application/json");
            var task1 = Client.PostAsync("https://api.openai.com/v1/responses", jsonContent);
            var task2 = Client.PostAsync("https://api.openai.com/v1/responses", jsonContent2);
            await Task.WhenAll(task1, task2);
            var response = await task1;
            var responseContent = await response.Content.ReadAsStringAsync();
            var responseObject = JsonSerializer.Deserialize<OpenAIResponse>(responseContent);
            var response2 = await task2;
            RenderedText = responseObject?.output[0].content[0].text ?? string.Empty;
            var responseContent2 = await response2.Content.ReadAsStringAsync();
            var responseObject2 = JsonSerializer.Deserialize<OpenAIResponse>(responseContent2);
            Logger.LogInformation(responseObject2?.ToString());

            foreach (var output in responseObject2.output)
            {
                if (output.type == "message")
                {
                    jobSummary = JobSummary.FromJson(
                        output.content[0].text);

                    referers = await firebaseStorageService.GetUsersFromCompany(jobSummary.CompanyName);
                    reviewers = await firebaseStorageService.GetReviewers();
                }
            }

            IsLoading = false;
        }
        catch (Exception ex)
        {
            throw new Exception("Error while uploading file", ex);
        }
    }


    async Task<string> GetDataURL(IBrowserFile pdfFile)
    {
        using var stream = pdfFile.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        byte[] bytes = memoryStream.ToArray();

        return "data:"
               + pdfFile.ContentType
               + ";base64,"
               + Convert.ToBase64String(bytes);
    }
}

